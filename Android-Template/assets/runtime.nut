/******************************************************
 *                                                    *
 *   RUNTIME CLASSES AND CONSTANTS FOR EMO-FRAMEWORK  *
 *                                                    *
 *            !!DO NOT EDIT THIS FILE!!               *
 ******************************************************/

EMO_VERSION <- "0.2.0";

OS_ANDROID <- "Android";
OS_IOS     <- "iOS";

ANDROID_GRAPHICS_DIR <- "graphics/";
ANDROID_SOUNDS_DIR   <- "sounds/";

HTTP_ERROR      <- "HTTP_ERROR";

EMO_NO_ERROR    <- 0x0000;
EMO_ERROR       <- 0x0001;
LOG_INFO        <- 0x0002;
LOG_WARN        <- 0x0003;
LOG_ERROR       <- 0x0004;

ERR_SCRIPT_LOAD           <- 0x0100;
ERR_SCRIPT_OPEN           <- 0x0101;
ERR_SCRIPT_COMPILE        <- 0x0102;
ERR_SCRIPT_CALL_ROOT      <- 0x0103;
ERR_ASSET_LOAD            <- 0x0104;
ERR_ASSET_OPEN            <- 0x0105;
ERR_ASSET_UNLOAD          <- 0x0106;
ERR_AUDIO_ENGINE_CREATED  <- 0x0107;
ERR_AUDIO_CHANNEL_CREATED <- 0x0108;
ERR_AUDIO_ENGINE_INIT     <- 0x0100;
ERR_AUDIO_ASSET_INIT      <- 0x0110;
ERR_AUDIO_ENGINE_CLOSED   <- 0x0111;
ERR_AUDIO_CHANNEL_CLOSED  <- 0x0112;
ERR_AUDIO_ENGINE_STATUS   <- 0x0113;
ERR_INVALID_PARAM_COUNT   <- 0x0114;
ERR_INVALID_PARAM_TYPE    <- 0x0115;
ERR_INVALID_PARAM         <- 0x0116;
ERR_INVALID_ID            <- 0x0117;
ERR_FILE_OPEN             <- 0x0118;
ERR_CREATE_VERTEX         <- 0x0119;
ERR_NOT_SUPPORTED         <- 0x0120;

OPT_ENABLE_PERSPECTIVE_NICEST   <- 0x1000;
OPT_ENABLE_PERSPECTIVE_FASTEST  <- 0x1001;
OPT_WINDOW_FORCE_FULLSCREEN     <- 0x1002;
OPT_WINDOW_KEEP_SCREEN_ON       <- 0x1003;
OPT_ENABLE_BACK_KEY             <- 0x1004;
OPT_DISABLE_BACK_KEY            <- 0x1005;
OPT_ORIENTATION_PORTRAIT        <- 0x1006;
OPT_ORIENTATION_LANDSCAPE       <- 0x1007;
OPT_ORIENTATION_UNSPECIFIED     <- 0x1008;
OPT_ORIENTATION_LANDSCAPE_LEFT  <- 0x1009;
OPT_ORIENTATION_LANDSCAPE_RIGHT <- 0x1010;

MODE_PRIVATE                    <- 0x0000;
MODE_WORLD_READABLE             <- 0x0001;
MODE_WORLD_WRITEABLE            <- 0x0002;

TYPE_ASSET     <- 0;
TYPE_DOCUMENT  <- 1;

EVENT_MODIFIER_START             <- 0;
EVENT_MODIFIER_RESTART           <- 1;
EVENT_MODIFIER_FINISH            <- 2;

MOTION_EVENT_ACTION_DOWN         <- 0;
MOTION_EVENT_ACTION_UP           <- 1;
MOTION_EVENT_ACTION_MOVE         <- 2;
MOTION_EVENT_ACTION_CANCEL       <- 3;
MOTION_EVENT_ACTION_OUTSIDE      <- 4;
MOTION_EVENT_ACTION_POINTER_DOWN <- 5;
MOTION_EVENT_ACTION_POINTER_UP   <- 6;

KEY_EVENT_ACTION_DOWN            <- 0;
KEY_EVENT_ACTION_UP              <- 1;
KEY_EVENT_ACTION_MULTIPLE        <- 2;

META_NONE           <- 0;
META_ALT_ON         <- 0x02;
META_ALT_LEFT_ON    <- 0x10;
META_ALT_RIGHT_ON   <- 0x20;
META_SHIFT_ON       <- 0x01;
META_SHIFT_LEFT_ON  <- 0x40;
META_SHIFT_RIGHT_ON <- 0x80;
META_SYM_ON         <- 0x04;

SENSOR_TYPE_ACCELEROMETER      <- 1;
SENSOR_TYPE_MAGNETIC_FIELD     <- 2;
SENSOR_TYPE_GYROSCOPE          <- 4;
SENSOR_TYPE_LIGHT              <- 5;
SENSOR_TYPE_PROXIMITY          <- 8;

SENSOR_STATUS_UNRELIABLE       <- 0;
SENSOR_STATUS_ACCURACY_LOW     <- 1;
SENSOR_STATUS_ACCURACY_MEDIUM  <- 2;
SENSOR_STATUS_ACCURACY_HIGH    <- 3;

SENSOR_STANDARD_GRAVITY           <-  9.80665;
SENSOR_MAGNETIC_FIELD_EARTH_MAX   <-  60.0;
SENSOR_MAGNETIC_FIELD_EARTH_MIN   <-  30.0;

KEYCODE_UNKNOWN         <- 0;
KEYCODE_SOFT_LEFT       <- 1;
KEYCODE_SOFT_RIGHT      <- 2;
KEYCODE_HOME            <- 3;
KEYCODE_BACK            <- 4;
KEYCODE_CALL            <- 5;
KEYCODE_ENDCALL         <- 6;
KEYCODE_0               <- 7;
KEYCODE_1               <- 8;
KEYCODE_2               <- 9;
KEYCODE_3               <- 10;
KEYCODE_4               <- 11;
KEYCODE_5               <- 12;
KEYCODE_6               <- 13;
KEYCODE_7               <- 14;
KEYCODE_8               <- 15;
KEYCODE_9               <- 16;
KEYCODE_STAR            <- 17;
KEYCODE_POUND           <- 18;
KEYCODE_DPAD_UP         <- 19;
KEYCODE_DPAD_DOWN       <- 20;
KEYCODE_DPAD_LEFT       <- 21;
KEYCODE_DPAD_RIGHT      <- 22;
KEYCODE_DPAD_CENTER     <- 23;
KEYCODE_VOLUME_UP       <- 24;
KEYCODE_VOLUME_DOWN     <- 25;
KEYCODE_POWER           <- 26;
KEYCODE_CAMERA          <- 27;
KEYCODE_CLEAR           <- 28;
KEYCODE_A               <- 29;
KEYCODE_B               <- 30;
KEYCODE_C               <- 31;
KEYCODE_D               <- 32;
KEYCODE_E               <- 33;
KEYCODE_F               <- 34;
KEYCODE_G               <- 35;
KEYCODE_H               <- 36;
KEYCODE_I               <- 37;
KEYCODE_J               <- 38;
KEYCODE_K               <- 39;
KEYCODE_L               <- 40;
KEYCODE_M               <- 41;
KEYCODE_N               <- 42;
KEYCODE_O               <- 43;
KEYCODE_P               <- 44;
KEYCODE_Q               <- 45;
KEYCODE_R               <- 46;
KEYCODE_S               <- 47;
KEYCODE_T               <- 48;
KEYCODE_U               <- 49;
KEYCODE_V               <- 50;
KEYCODE_W               <- 51;
KEYCODE_X               <- 52;
KEYCODE_Y               <- 53;
KEYCODE_Z               <- 54;
KEYCODE_COMMA           <- 55;
KEYCODE_PERIOD          <- 56;
KEYCODE_ALT_LEFT        <- 57;
KEYCODE_ALT_RIGHT       <- 58;
KEYCODE_SHIFT_LEFT      <- 59;
KEYCODE_SHIFT_RIGHT     <- 60;
KEYCODE_TAB             <- 61;
KEYCODE_SPACE           <- 62;
KEYCODE_SYM             <- 63;
KEYCODE_EXPLORER        <- 64;
KEYCODE_ENVELOPE        <- 65;
KEYCODE_ENTER           <- 66;
KEYCODE_DEL             <- 67;
KEYCODE_GRAVE           <- 68;
KEYCODE_MINUS           <- 69;
KEYCODE_EQUALS          <- 70;
KEYCODE_LEFT_BRACKET    <- 71;
KEYCODE_RIGHT_BRACKET   <- 72;
KEYCODE_BACKSLASH       <- 73;
KEYCODE_SEMICOLON       <- 74;
KEYCODE_APOSTROPHE      <- 75;
KEYCODE_SLASH           <- 76;
KEYCODE_AT              <- 77;
KEYCODE_NUM             <- 78;
KEYCODE_HEADSETHOOK     <- 79;
KEYCODE_FOCUS           <- 80;
KEYCODE_PLUS            <- 81;
KEYCODE_MENU            <- 82;
KEYCODE_NOTIFICATION    <- 83;
KEYCODE_SEARCH          <- 84;
KEYCODE_MEDIA_PLAY_PAUSE<- 85;
KEYCODE_MEDIA_STOP      <- 86;
KEYCODE_MEDIA_NEXT      <- 87;
KEYCODE_MEDIA_PREVIOUS  <- 88;
KEYCODE_MEDIA_REWIND    <- 89;
KEYCODE_MEDIA_FAST_FORWARD <- 90;
KEYCODE_MUTE            <- 91;
KEYCODE_PAGE_UP         <- 92;
KEYCODE_PAGE_DOWN       <- 93;
KEYCODE_PICTSYMBOLS     <- 94;
KEYCODE_SWITCH_CHARSET  <- 95;
KEYCODE_BUTTON_A        <- 96;
KEYCODE_BUTTON_B        <- 97;
KEYCODE_BUTTON_C        <- 98;
KEYCODE_BUTTON_X        <- 99;
KEYCODE_BUTTON_Y        <- 100;
KEYCODE_BUTTON_Z        <- 101;
KEYCODE_BUTTON_L1       <- 102;
KEYCODE_BUTTON_R1       <- 103;
KEYCODE_BUTTON_L2       <- 104;
KEYCODE_BUTTON_R2       <- 105;
KEYCODE_BUTTON_THUMBL   <- 106;
KEYCODE_BUTTON_THUMBR   <- 107;
KEYCODE_BUTTON_START    <- 108;
KEYCODE_BUTTON_SELECT   <- 109;
KEYCODE_BUTTON_MODE     <- 110;

AUDIO_CHANNEL_STOPPED   <- 1;
AUDIO_CHANNEL_PAUSED    <- 2;
AUDIO_CHANNEL_PLAYING   <- 3;

CONTROL_UP     <- 0;
CONTROL_DOWN   <- 1;
CONTROL_LEFT   <- 2;
CONTROL_RIGHT  <- 3;
CONTROL_CENTER <- 4;

DEFAULT_DATABASE_NAME  <- "emoruntime.db";
PREFERENCE_TABLE_NAME  <- "preferences";

EMO_RUNTIME_DELEGATE    <- null;
EMO_RUNTIME_STOPWATCH   <- emo.Stopwatch();
EMO_MOTION_LISTENERS    <- [];
EMO_RUNTIME_SNAPSHOT    <- null;
EMO_RUNTIME_SNAPSHOT_STOPPED <- false;

EMO_STAGE_CONTENT_SCALE <- 1;

GL_ZERO                <- 0;
GL_ONE                 <- 1;
GL_SRC_COLOR           <- 0x0300;
GL_ONE_MINUS_SRC_COLOR <- 0x0301;
GL_SRC_ALPHA           <- 0x0302;
GL_ONE_MINUS_SRC_ALPHA <- 0x0303;
GL_DST_ALPHA           <- 0x0304;
GL_ONE_MINUS_DST_ALPHA <- 0x0305;
GL_DST_COLOR           <- 0x0306;
GL_ONE_MINUS_DST_COLOR <- 0x0307;
GL_SRC_ALPHA_SATURATE  <- 0x0308;

class emo.Vec2 {
    x = null;
    y = null;
    function constructor(_x, _y) {
        x = _x;
        y = _y;
    }
    
    function set(_x, _y) {
        x = _x;
        y = _y;
    }
    
    function fromArray(arg) {
        if (arg == null || arg.len() < 2) return null;
        return emo.Vec2(arg[0], arg[1]);
    }
    
    function distance(other) {
        local c = emo.Vec2(x-other.x, y-other.y);
        return c.length();
    }
    
    function length() {
        return sqrt(x * x + y * y);
    }
    
    function _add(other) {
        return emo.Vec2(x+other.x, y+other.y);
    }
    function _sub(other) {
        return emo.Vec2(x-other.x, y-other.y);
    }
    function _mul(other) {
        return emo.Vec2(x*other.x, y*other.y);
    }
    function _div(other) {
        return emo.Vec2(x/other.x.tofloat(), y/other.y.tofloat());
    }
    function _modulo(other) {
        return emo.Vec2(x%other.x.tofloat(), y%other.y.tofloat());
    }
}

class emo.TileIndex {
    row    = null;
    column = null;
    
    function constructor(_row, _column) {
        row = _row;
        column = _column;
    }
    
    function set(_row, _column) {
        row = _row;
        column = _column;
    }
    
    function fromArray(arg) {
        if (arg == null || arg.len() < 2) return null;
        return emo.TileIndex(arg[0], arg[1]);
    }
}

function emo::Runtime::version() {
    return EMO_VERSION + " build " + buildNumber();
}

function emo::Runtime::uptime() {
    return EMO_RUNTIME_STOPWATCH.elapsed();
}

function emo::Event::addMotionListener(listener) {
    EMO_MOTION_LISTENERS.append(listener);
}

function emo::Event::removeMotionListener(listener) {
    local idx = EMO_MOTION_LISTENERS.find(listener);
    if (idx != null) {
        EMO_MOTION_LISTENERS.remove(idx);
    }
}

function emo::Stage::setContentScale(scale) {
    EMO_STAGE_CONTENT_SCALE = EMO_STAGE_CONTENT_SCALE * scale.tofloat();
    ortho(getWindowWidth() / scale.tofloat(), getWindowHeight() / scale.tofloat());
}

function emo::Stage::getContentScale() {
    return EMO_STAGE_CONTENT_SCALE;
}

function emo::toRadian(degree) {
    return degree * PI / 180.0;
}

function emo::toDegree(radian) {
    return radian * 180.0 / PI;
}

function min(a, b) {
    return a < b ? a : b;
}

function max(a, b) {
    return a > b ? a : b;
}

function round(x) {
    return (x.tofloat() + (x > 0 ? 0.5 : -0.5)).tointeger();
}

class emo.Instance {
    type = null;
}

class emo.ModifierManager {
    modifiers = null;
    modifiersToRemove = null;
    function constructor() {
        modifiers = [];
        modifiersToRemove = [];
    }
    
    function add(modifier) {
        if (modifiers.len() == 0) {
            emo.Event().enableOnUpdateCallback();
        }
        modifiers.append(modifier);
    }
    
    function remove(modifier) {
        modifiersToRemove.append(modifier);
    }
    
    function removeForObject(obj) {
        for (local i = 0; i < modifiers.len(); i++) {
            if (modifiers[i].getObject() == obj) {
                modifiersToRemove.append(modifiers[i]);
            }
        }
    }
    
    function onUpdate() {
        for (local i = 0; i < modifiers.len(); i++) {
            modifiers[i].onUpdate();
        }
        if (modifiersToRemove.len() > 0) {
            for (local i = 0; i < modifiersToRemove.len(); i++) {
                local idx = modifiers.find(modifiersToRemove[i]);
                if (idx != null) {
                    modifiers.remove(idx);
                }
            }
            if (modifiers.len() == 0) {
                emo.Event().disableOnUpdateCallback();
            }
            modifiersToRemove.clear();
        }
    }
    
    function onPause() {
        for (local i = 0; i < modifiers.len(); i++) {
            modifiers[i].onPause();
        }
    }
    
    function onResume() {
        for (local i = 0; i < modifiers.len(); i++) {
            modifiers[i].onResume();
        }
    }
    
    function getModifierCount() {
        return modifiers.len();
    }
}

EMO_ON_UPDATE_MANAGER    <- emo.ModifierManager();

function emo::Event::addOnUpdateListener(listener) {
    EMO_ON_UPDATE_MANAGER.add(listener);
}

function emo::Event::removeOnUpdateListener(listener) {
    EMO_ON_UPDATE_MANAGER.remove(listener);
}

function emo::Event::removeOnUpdateListenerForObject(obj) {
    EMO_ON_UPDATE_MANAGER.removeForObject(obj);
}

class emo.Modifier {
    name      = null;
    targetObj = null;
    startTime   = null;
    pausedTime  = null;
    minValue = null;
    maxValue = null;
    duration = null;
    easing   = null;
    started  = null;
    listener   = null;
    repeatCount   = null;
    currentCount  = null;
    eventCallback = null;
    nextChain     = null;
    function constructor(_minValue, _maxValue, _duration, _easing, _repeatCount = 0, _startTime = null) {
        if (_startTime == null) {
            startTime = EMO_RUNTIME_STOPWATCH.elapsed();
        } else {
            startTime = _startTime;
        }
        pausedTime  = startTime;
        
        minValue = _minValue;
        maxValue = _maxValue;
        duration = _duration.tofloat();
        easing   = _easing;
        started  = false;
        repeatCount  = _repeatCount;
        currentCount = 0;
    }
    function elapsed() {
        return EMO_RUNTIME_STOPWATCH.elapsed() - startTime;
    }
    function currentValue(min, max, percent) {
        return min + (percent * (max - min));
    }
    function onPause() {
        pausedTime = EMO_RUNTIME_STOPWATCH.elapsed();
        return this;
    }
    function onResume() {
        startTime = startTime + (EMO_RUNTIME_STOPWATCH.elapsed() - pausedTime);
        return this;
    }
    function onUpdate() {
        if (!started) {
            started = true;
            if (eventCallback != null) {
                eventCallback(targetObj, this, EVENT_MODIFIER_START);
            }
            if (listener != null) {
                listener.onModifierEvent(targetObj, this, EVENT_MODIFIER_START);
            }
        }

        local elapsedf = elapsed().tofloat();
        local percent  = easing(elapsedf, duration, this);
        local current  = currentValue(minValue, maxValue, percent);
        if (elapsedf >= duration) {
            onModify(maxValue);
            if (repeatCount >= 0 && repeatCount <= currentCount) {
                emo.Event().removeOnUpdateListener(this);
                if (eventCallback != null) {
                    eventCallback(targetObj, this, EVENT_MODIFIER_FINISH);
                }
                if (listener != null) {
                    listener.onModifierEvent(targetObj, this, EVENT_MODIFIER_FINISH);
                }
            } else {
                startTime = EMO_RUNTIME_STOPWATCH.elapsed();
                currentCount++;
                if (eventCallback != null) {
                    eventCallback(targetObj, this, EVENT_MODIFIER_RESTART);
                }
                if (listener != null) {
                    listener.onModifierEvent(targetObj, this, EVENT_MODIFIER_RESTART);
                }
            }
            return;
        }
        onModify(current);
    }
    
    /* subclass must override this method to apply changes to targetObj. */
    function onModify(currentValue) {
        
    }
    
    function setObject(obj) {
        targetObj = obj;
    }
    
    function getObject() {
        return targetObj;
    }

    function setName(_name) {
        name = _name;
    }

    function getName() {
        return name;
    }
    
    function setEventListener(prnt) {
        listener = prnt;
    }
    
    function getEventListener() {
        return listener;
    }
    
    function resetTimer() {
        startTime   = EMO_RUNTIME_STOPWATCH.elapsed();
        pausedTime  = startTime;
        
        currentCount = 0;
        started = false;
    }

    function setEventCallback(func) {
        eventCallback = func;
    }
}

class emo.ConcurrentModifier {
    modifiers       = null;
    name            = null;
    eventCallback   = null;
    listener        = null;
    nextChain       = null;

    function constructor(...) {
        modifiers = [];
        for (local i = 0; i < vargv.len(); i++) {
            addModifier(vargv[i]);
        }
    }
    
    function addModifier(_modifier) {
        _modifier.setEventListener(this);
        _modifier.onResume();
        
        modifiers.append(_modifier);
    }
    
    function onModifierEvent(targetObj, _modifier, eventType) {
        if (eventType == EVENT_MODIFIER_FINISH) {
            emo.Event().removeOnUpdateListener(_modifier);

            local idx = modifiers.find(_modifier);
            if (idx != null) modifiers.remove(idx);
            if (modifiers.len() > 0) return;

            emo.Event().removeOnUpdateListener(this);
            if (eventCallback != null) {
                eventCallback(targetObj, this, EVENT_MODIFIER_FINISH);
            }
            if (listener != null) {
                listener.onModifierEvent(targetObj, this, EVENT_MODIFIER_FINISH);
            }
        }
    }
    
    function setObject(obj) {
        for (local i = 0; i < modifiers.len(); i++) {
            modifiers[i].setObject(obj);
        }
    }

    function setName(_name) {
        name = _name;
    }
    
    function onPause() {
        for (local i = 0; i < modifiers.len(); i++) {
            modifiers[i].onPause();
        }
    }
    
    function onResume() {
        for (local i = 0; i < modifiers.len(); i++) {
            modifiers[i].onResume();
        }
    }
    
    function onUpdate() {
        for (local i = 0; i < modifiers.len(); i++) {
            modifiers[i].onUpdate();
        }
    }
    
    function getObject() {
        if (modifiers.len() > 0) {
            return modifiers[0].getObject();
        } else {
            return null;
        }
    }
    
    function getName() {
        return name;
    }

    function setEventCallback(func) {
        eventCallback = func;
    }
    
    function setEventListener(prnt) {
        listener = prnt;
    }
    
    function getEventListener() {
        return listener;
    }
}

class emo.SequenceModifier {
    modifiers       = null;
    name            = null;
    eventCallback   = null;
    modifier        = null;
    started         = null;
    modifierIndex   = null;
    repeatCount     = null;
    currentCount    = null;
    listener        = null;
    nextChain       = null;
    
    function constructor(...) {
        modifiers = [];
        for (local i = 0; i < vargv.len(); i++) {
            vargv[i].setEventListener(this);
            vargv[i].onPause();
            modifiers.append(vargv[i]);
        }
        if (vargv.len() > 0) {
            modifier = modifiers[0];
            modifier.onResume();
        }
        started = false;
        modifierIndex = 0;
        repeatCount   = 0;
        currentCount  = 0;
    }
    
    function addModifier(_modifier) {
        _modifier.setEventListener(this);
        _modifier.onPause();
        
        modifiers.append(_modifier);
        
        if (modifiers.len() == 1) {
            modifier = _modifier;
            modifier.onResume();
        }
    }
    
    function setRepeatCount(count) {
        repeatCount = count;
    }
    
    function onModifierEvent(obj, _modifier, eventType) {
        if (!started && eventType == EVENT_MODIFIER_START) {
            started = true;
            if (eventCallback != null) {
                eventCallback(obj, this, eventType);
            }
            if (listener != null) {
                listener.onModifierEvent(obj, this, eventType);
            }
        } else if (eventType == EVENT_MODIFIER_FINISH) {
            modifierIndex++;
            if (modifierIndex < modifiers.len()) {
                modifier = modifiers[modifierIndex];
                modifier.onResume();
            } else {
                if (currentCount == repeatCount) {
                    for (local i = 0; i < modifiers.len(); i++) {
                        modifiers[i].setEventListener(null);
                    }
                    modifier = null;
                    modifiers.clear();
                    emo.Event().removeOnUpdateListener(this);
                    if (eventCallback != null) {
                        eventCallback(obj, this, eventType);
                    }
                    if (listener != null) {
                        listener.onModifierEvent(obj, this, eventType);
                    }
                } else {
                    currentCount++;
                    for (local i = 0; i < modifiers.len(); i++) {
                        modifiers[i].resetTimer();
                        modifiers[i].onPause();
                    }
                    modifierIndex = 0;
                    modifier = modifiers[modifierIndex];
                    modifier.onResume();
                    if (eventCallback != null) {
                        eventCallback(obj, this, EVENT_MODIFIER_RESTART);
                    }
                    if (listener != null) {
                        listener.onModifierEvent(obj, this, EVENT_MODIFIER_RESTART);
                    }
                }
            }
        }
    }
    
    function setObject(obj) {
        for (local i = 0; i < modifiers.len(); i++) {
            modifiers[i].setObject(obj);
        }
    }

    function setName(_name) {
        for (local i = 0; i < modifiers.len(); i++) {
            modifiers[i].setName(_name);
        }
        name = _name;
    }
    
    function onPause() {
        if (modifier != null) modifier.onPause();
    }
    
    function onResume() {
        if (modifier != null) modifier.onResume();
    }
    
    function onUpdate() {
        if (modifier != null) modifier.onUpdate();
    }

    function onModify(currentValue) {
        if (modifier != null) modifier.onModiy(currentValue);
    }
    
    function getObject() {
        if (modifier != null) return modifier.getObject();
    }
    
    function getName() {
        return name;
    }

    function setEventCallback(func) {
        eventCallback = func;
    }
    
    function setEventListener(prnt) {
        listener = prnt;
    }
    
    function getEventListener() {
        return listener;
    }
}

class emo.MultiModifier extends emo.Modifier {
    enableMultipleEasing = null;
    function constructor(_minValue, _maxValue, _duration, _easing, _repeatCount = 0, _startTime = null) {
        base.constructor(_minValue, _maxValue, _duration, _easing, _repeatCount, _startTime);
        enableMultipleEasing = type(_easing) == "array";
    }

    function onUpdate() {
        if (!started) {
            started = true;
            if (eventCallback != null) {
                eventCallback(targetObj, this, EVENT_MODIFIER_START);
            }
            if (listener != null) {
                listener.onModifierEvent(targetObj, this, EVENT_MODIFIER_START);
            }
        }
        local current = [];
        local elapsedf = elapsed().tofloat();
        for (local i = 0; i < minValue.len(); i++) {
            if (elapsedf >= duration) {
                onModify(maxValue);
                if (repeatCount >= 0 && repeatCount <= currentCount) {
                    emo.Event().removeOnUpdateListener(this);
                    if (eventCallback != null) {
                        eventCallback(targetObj, this, EVENT_MODIFIER_FINISH);
                    }
                    if (listener != null) {
                        listener.onModifierEvent(targetObj, this, EVENT_MODIFIER_FINISH);
                    }
                } else {
                    startTime = EMO_RUNTIME_STOPWATCH.elapsed();
                    currentCount++;
                    if (eventCallback != null) {
                        eventCallback(targetObj, this, EVENT_MODIFIER_RESTART);
                    }
                    if (listener != null) {
                        listener.onModifierEvent(targetObj, this, EVENT_MODIFIER_RESTART);
                    }
                }
                return;
            }
            local percent;
            if (enableMultipleEasing) {
                percent = easing[i](elapsedf, duration, this);
            } else {
                percent = easing(elapsedf, duration, this);
            }
            current.append(currentValue(minValue[i], maxValue[i], percent));
        }
        onModify(current);
    }
}

class emo.ScaleModifier extends emo.Modifier {
    function onModify(currentValue) {
        targetObj.scale(currentValue, currentValue);
    }
}

class emo.RotateModifier extends emo.Modifier {
    function onModify(currentValue) {
        targetObj.rotate(currentValue);
    }
}

class emo.AlphaModifier extends emo.Modifier {
    function onModify(currentValue) {
        targetObj.alpha(currentValue);
    }
}

class emo.MoveModifier extends emo.MultiModifier {
    function onModify(currentValue) {
        targetObj.move(currentValue[0], currentValue[1]);
    }
}

class emo.AlphaModifier extends emo.Modifier {
    function onModify(currentValue) {
        targetObj.alpha(currentValue);
    }
}

class emo.NoopModifier extends emo.Modifier {
    function constructor(_duration, _repeatCount = 0, _startTime = null) {
        base.constructor(0, _duration, _duration, emo.easing.Linear, _repeatCount, _startTime);
    }
    
    function onModify(currentValue) {
        // do nothing but wait
    }
}

class emo.ColorModifier extends emo.MultiModifier {
    function onModify(currentValue) {
        targetObj.color(currentValue[0], currentValue[1], currentValue[2]);
    }
}

emo.easing <- {};
function emo::easing::Linear(elapsed, duration, modifier) {
    return elapsed / duration;
}

function emo::easing::CubicIn(elapsed, duration, modifier) {
    return (elapsed = elapsed / duration) * pow(elapsed, 2);
}

function emo::easing::CubicOut(elapsed, duration, modifier) {
    return (elapsed = elapsed / duration - 1) * pow(elapsed, 2) + 1;
}

function emo::easing::CubicInOut(elapsed, duration, modifier) {
    if ((elapsed /= duration / 2.0) < 1) return 1.0 / 2.0 * pow(elapsed, 3);
    return 1.0 / 2.0 * ((elapsed -= 2) * pow(elapsed, 2) + 2);
}

function emo::easing::BackIn(elapsed, duration, modifier) {
    return (elapsed /= duration) * elapsed * ((1.70158 + 1) * elapsed - 1.70158);
}

function emo::easing::BackOut(elapsed, duration, modifier) {
    return ((elapsed = elapsed / duration - 1) * elapsed * ((1.70158 + 1) * elapsed + 1.70158) + 1);
}

function emo::easing::BackInOut(elapsed, duration, modifier) {
    local s = 1.70158;
    if ((elapsed /= duration / 2.0) < 1) return 1.0 / 2.0 * (elapsed * elapsed * (((s *= (1.525)) + 1) * elapsed - s));
    return 1.0 / 2.0 * ((elapsed -= 2) * elapsed * (((s *= (1.525)) + 1) * elapsed + s) + 2);
}

function emo::easing::ElasticIn(elapsed, duration, modifier) {
    if ((elapsed /= duration) == 1) return 1;
    local p = duration * 0.3;
    local s = p / 4.0;
    return -(pow(2, 10 * (elapsed -= 1)) * sin((elapsed * duration - s) * (2.0 * PI) / p));
}

function emo::easing::ElasticOut(elapsed, duration, modifier) {
    if ((elapsed /= duration) == 1) return 1;
    local p = duration * 0.3;
    local s = p / 4.0;
    return (pow(2, -10 * elapsed) * sin((elapsed * duration - s) * (2.0 * PI) / p) + 1);
}

function emo::easing::ElasticInOut(elapsed, duration, modifier) {
    if ((elapsed /= duration / 2.0) == 2) return 1;
    local p = duration * (0.3 * 1.5);
    local s = p / 4.0;
    if (elapsed < 1) return -0.5 * (pow(2, 10 * (elapsed -= 1)) * sin((elapsed * duration - s) * (2.0 * PI) / p));
    return pow(2, -10 * (elapsed -= 1)) * sin((elapsed * duration - s) * (2.0 * PI) / p) * 0.5 + 1;
}

function emo::easing::BounceOut(elapsed, duration, modifier) {
    if ((elapsed /= duration) < (1.0 / 2.75)) return (7.5625 * elapsed * elapsed);
    else if (elapsed < (2.0 / 2.75)) return (7.5625 * (elapsed -= (1.5 / 2.75)) * elapsed + 0.75);
    else if (elapsed < (2.5 / 2.75)) return (7.5625 * (elapsed -= (2.25 / 2.75)) * elapsed + 0.9375);
    else return (7.5625 * (elapsed -= (2.625 / 2.75)) * elapsed + 0.984375);
}

function emo::easing::BounceIn(elapsed, duration, modifier) {
    return 1 - emo.easing.BounceOut(duration - elapsed, duration, modifier);
}

function emo::easing::BounceInOut(elapsed, duration, modifier) {
    if (elapsed < duration / 2.0) return emo.easing.BounceIn(elapsed * 2.0, duration, modifier) * 0.5;
    else return emo.easing.BounceOut(t * 2.0 - duration, duration, modifier) * 0.5 + 0.5;
}

function emo::easing::ExpoIn(elapsed, duration, modifier) {
    return (elapsed == 0) ? 0 : pow(2, 10 * (elapsed / duration - 1));
}

function emo::easing::ExpoOut(elapsed, duration, modifier) {
    return (elapsed == duration) ? 1 : (-pow(2, -10 * elapsed / duration) + 1);
}

function emo::easing::ExpoInOut(elapsed, duration, modifier) {
    if (elapsed == 0) return 0;
    if (elapsed == duration) return 1;
    if ((elapsed /= duration / 2.0) < 1) return 1.0 / 2.0 * pow(2, 10 * (elapsed - 1));
    return 1.0 / 2.0 * (-pow(2, -10 * --elapsed) + 2);
}

function emo::easing::QuadIn(elapsed, duration, modifier) {
    return (elapsed /= duration) * elapsed;
}

function emo::easing::QuadOut(elapsed, duration, modifier) {
    return -1 * (elapsed /= duration) * (elapsed - 2);
}

function emo::easing::QuadInOut(elapsed, duration, modifier) {
    if ((elapsed /= duration / 2.0) < 1) return 1.0 / 2.0 * elapsed * elapsed;
    return -1.0 / 2.0 * ((--elapsed) * (elapsed - 2) - 1);
}

function emo::easing::SineIn(elapsed, duration, modifier) {
    return -1 * cos(elapsed / duration * (PI / 2.0)) + 1;
}

function emo::easing::SineOut(elapsed, duration, modifier) {
    return 1 * sin(elapsed / duration * (PI / 2.0));
}

function emo::easing::SineInOut(elapsed, duration, modifier) {
    if ((elapsed /= duration / 2.0) < 1) return 1.0 / 2.0 * (sin(PI * elapsed / 2.0));
    return -1.0 / 2.0 * (cos(PI * --elapsed / 2.0) - 2);
}

function emo::easing::CircIn(elapsed, duration, modifier) {
    return -1 * (sqrt(1 - (elapsed /= duration) * elapsed) - 1);
}

function emo::easing::CircOut(elapsed, duration, modifier) {
    return sqrt(1 - (elapsed = elapsed / duration - 1) * elapsed);
}

function emo::easing::CircInOut(elapsed, duration, modifier) {
    if ((elapsed /= duration / 2.0) < 1) return -1.0 / 2.0 * (sqrt(1 - elapsed * elapsed) - 1);
    return 1.0 / 2.0 * (sqrt(1 - (elapsed -= 2) * elapsed) + 1);

}

function emo::easing::QuintIn(elapsed, duration, modifier) {
    return (elapsed /= duration) * elapsed * elapsed * elapsed * elapsed;
}

function emo::easing::QuintOut(elapsed, duration, modifier) {
    return ((elapsed = elapsed / duration - 1) * elapsed * elapsed * elapsed * elapsed + 1);
}

function emo::easing::QuintInOut(elapsed, duration, modifier) {
    if ((elapsed /= duration / 2.0) < 1) return 1.0 / 2.0 * elapsed * elapsed * elapsed * elapsed * elapsed;
    return 1.0 / 2.0 * ((elapsed -= 2) * elapsed * elapsed * elapsed * elapsed + 2);
}

function emo::easing::QuartIn(elapsed, duration, modifier) {
    return (elapsed /= duration) * elapsed * elapsed * elapsed;
}

function emo::easing::QuartOut(elapsed, duration, modifier) {
    return -1 * ((elapsed = elapsed / duration - 1) * elapsed * elapsed * elapsed - 1);
}

function emo::easing::QuartInOut(elapsed, duration, modifier) {
    if ((t /= duration / 2.0) < 1) return 1.0 / 2.0 * elapsed * elapsed * elapsed * elapsed;
    return -1.0 / 2.0 * ((elapsed -= 2) * elapsed * elapsed * elapsed - 2);
}

class emo.MotionEvent {
    param = null;
    function constructor(args) {
        param = args;
    }

    function getPointerId() { return param[0]; }
    function getAction()    { return param[1]; }
    function getX() { return param[2] / EMO_STAGE_CONTENT_SCALE; }
    function getY() { return param[3] / EMO_STAGE_CONTENT_SCALE; }
    function getEventTime() { return param[4] + (param[5] / 1000); }
    function getDeviceId()  { return param[6]; }
    function getSource() { return param[7]; }

    function toString() {
        local sb = "";
        for(local i = 0; i < param.len(); i++) {
            sb = sb + param[i] + " ";
        }
        return sb;
    }
}

class emo.KeyEvent {
    param = null;
    function constructor(args) {
        param = args;
    }
    function getAction() { return param[0]; }
    function getKeyCode() { return param[1]; }
    function getRepeatCount() { return param[2]; }
    function getMetaState() { return param[3]; }
    function getEventTime() { return param[4] + (param[5] / 1000); }
    function getDeviceId()  { return param[6]; }
    function getSource() { return param[7]; }

    function toString() {
        local sb = "";
        for(local i = 0; i < param.len(); i++) {
            sb = sb + param[i] + " ";
        }
        return sb;
    }
}

class emo.SensorEvent {
    param = null;
    function constructor(args) {
        param = args;
    }

    function getType() { return param[0]; }
    function getAccelerationX() { return param[1]; }
    function getAccelerationY() { return param[2]; }
    function getAccelerationZ() { return param[3]; }

    function toString() {
        local sb = "";
        for(local i = 0; i < param.len(); i++) {
            sb = sb + param[i] + " ";
        }
        return sb;
    }
}

class emo.AudioChannel {

    id        = null;
    manager   = null;

    function constructor(_id, _manager) {
        id = _id;
        manager = _manager;
    }

    function load(file) {
        local runtime = emo.Runtime();
        if (runtime.os() == OS_ANDROID) {
            file = ANDROID_SOUNDS_DIR + file;
        }
        return manager.load(id, file);
    }
    function play(reset = false)  {
        if (reset) {
            return manager.play(id);
        }
    
        local state = getState();
        if (state == AUDIO_CHANNEL_PAUSED) {
            return manager.resume_play(id);
        } else {
            return manager.play(id);
        }
    }
    function pause() { return manager.pause(id); }
    function stop()  { return manager.stop(id); }
    function seek(pos) { return manager.seek(id, pos); }
    function getVolume() { return manager.getVolume(id); }
    function setVolume(vol) { return manager.setVolume(id, vol); }
    function getMaxVolume() { return manager.getMaxVolume(id); }
    function getMinVolume() { return manager.getMinVolume(id); }
    function setLoop(enable) {
        return manager.setLoop(id, enable);
    }
    function isLoop() {
        return manager.isLoop(id);
    }
    function getState() { return manager.getState(id); }
    function close() { return manager.close(id); }
}

function emo::Audio::createChannel(id) {
    return emo.AudioChannel(id, this);
}

class emo.Sprite {

    name   = null;
    stage  = emo.Stage();
    runtime = emo.Runtime();

    id       = null;
    childId  = null;
    loaded   = null;
    uptime   = null;
    
    physicsInfo = null;

    function constructor(rawname) {
        name = this.getResourceName(rawname);
        id   = stage.createSprite(name);
        childId = -1;
        loaded = false;
    }

    function getResourceName(rawname) {
        if (rawname == null) return null;
        if (runtime.os() == OS_ANDROID) {
            rawname = ANDROID_GRAPHICS_DIR + rawname;
        }
        return rawname;
    }

    function load(x = null, y = null, width = null, height = null) {
        local status = EMO_NO_ERROR;
        if (!loaded) {

            status = stage.loadSprite(id, x, y, width, height);

            if (status == EMO_NO_ERROR) {
                uptime = EMO_RUNTIME_STOPWATCH.elapsed();
                loaded = true;
            }
        }
        return status;
    }
    
    function show() { return stage.show(id); }
    function hide() { return stage.hide(id); }
    function alpha(a = null) { return stage.alpha(id, a); }
    function red  (r = null) { return stage.red  (id, r); }
    function green(g = null) { return stage.green(id, g); }
    function blue (b = null) { return stage.blue (id, b); }

    function isLoaded() { return loaded; }

    function getX() { return stage.getX(id); }
    function getY() { return stage.getY(id); }
    function getZ() { return stage.getZ(id); }
    function getWidth()  { return stage.getWidth(id); }
    function getHeight() { return stage.getHeight(id); }
    function getScaledWidth()  { return getWidth()  * getScaleX(); }
    function getScaledHeight() { return getHeight() * getScaleY(); }

    function setX(x) { return stage.setX(id, x); }
    function setY(y) { return stage.setY(id, y); }
    function setZ(z) { return stage.setZ(id, z); }

    function setWidth(w)   { return stage.setWidth(id, w); }
    function setHeight(h)  { return stage.setHeight(id, h); }
    function setSize(w, h) { return stage.setSize(id, w, h); }

    function getScale()  { return stage.getScaleX(id); }
    function getScaleX() { return stage.getScaleX(id); }
    function getScaleY() { return stage.getScaleY(id); }
    function getAngle()  { return stage.getAngle(id); }

    function contains(x, y) {
        return x >= getX() && x <= getX() + getWidth() &&
               y >= getY() && y <= getY() + getHeight();
    }

    function collidesWith(other) {
        return this.getX() < other.getX() + other.getWidth() && other.getX() < this.getX() + this.getWidth() &&
            this.getY() < other.getY() + other.getHeight() && other.getY() < this.getY() + this.getHeight();
    }

    function _cmp(other) {
        if (this.getId() == other.getId())  return 0;
        if (this.getId() >  other.getId())  return 1;
        return -1;
    }

    function move(x, y, z = null) {
        return stage.move(id, x, y, z);
    }

    function moveCenter(x, y, z = null) {
        return move(x - (getScaledWidth() * 0.5), y - (getScaledHeight() * 0.5), z);
    }
    
    function getCenterX() {
        return getX() + (getWidth() * 0.5);
    }
    
    function getCenterY() {
        return getY() + (getHeight() * 0.5);
    }

    function scale(scaleX, scaleY, centerX = null, centerY = null) {
        return stage.scale(id, scaleX, scaleY, centerX, centerY);
    }

    function rotate(angle, centerX = null, centerY = null, axis = null) {
        return stage.rotate(id, angle, centerX, centerY, axis);
    }

    function color(red, green, blue, alpha = null) {
        return stage.color(id, red, green, blue, alpha);
    }

    function remove() {
        local status = EMO_NO_ERROR;
        if (loaded) {
            clearModifier();
            emo.Event().removeMotionListener(this);
            if (physicsInfo != null) {
                physicsInfo.remove();
                physicsInfo = null;
            }
            status = stage.remove(id);
            loaded = false;
        }
        return status;
    }

    function getId() {
        return id;
    }

    function getName() {
        return name;
    }
    
    function addModifier(modifier, startTime = null) {
        if (startTime != null) modifier.startTime = startTime;

        modifier.setObject(this);
        emo.Event().addOnUpdateListener(modifier);
    }

    function removeModifier(modifier) {
        emo.Event().removeOnUpdateListener(modifier);
    }
    
    function clearModifier() {
        emo.Event().removeOnUpdateListenerForObject(this);
    }
    
    function setPhysicsInfo(_physicsInfo) {
        physicsInfo = _physicsInfo;
    }
    
    function getPhysicsInfo() {
        return physicsInfo;
    }
    
    function getFixture() {
        if (physicsInfo == null) return null;
        return physicsInfo.getFixture();
    }
    
    function getPhysicsBody() {
        if (physicsInfo == null) return null;
        return physicsInfo.getBody();
    }
    
    function elapsed() {
        if (uptime == null) return -1;
        return EMO_RUNTIME_STOPWATCH.elapsed() - uptime;
    }

    function blendFunc(sfactor, dfactor) {
        return stage.blendFunc(id, sfactor, dfactor);
    }
}

class emo.FontSprite extends emo.Sprite {
    function constructor(_name, _fontsize = null, _fontface = null, _isBold = false, _isItalic = false) {
        updateName(_name);
        id = stage.createFontSprite(name, _fontsize, _fontface, _isBold, _isItalic);
    }
    function updateName(_name) {
        name = "emo.FontSprite::" + _name;
    }
    function setParam(param1, param2 = null, param3 = null, param4 = null, param5 = null, param6 = null) {
        if (param1 != null) param1 = param1.tostring();
        if (param2 != null) param2 = param2.tostring();
        if (param3 != null) param3 = param3.tostring();
        if (param4 != null) param4 = param4.tostring();
        if (param5 != null) param5 = param5.tostring();
        if (param6 != null) param6 = param6.tostring();
        stage.setFontSpriteParam(id, param1, param2, param3, param4, param5, param6);
    }
    function reload(_name = null) {
        if (_name != null) updateName(_name);
        stage.reloadFontSprite(id, name);
    }
}

class emo.SpriteSheet extends emo.Sprite {

    function constructor(rawname, frameWidth = 1, frameHeight = 1, border = 0, margin = 0, frameIndex = 0) {
        name = base.getResourceName(rawname);
        id = stage.createSpriteSheet(name, frameIndex, frameWidth, frameHeight, border, margin);
    }
    
    function load(x = null, y = null, frameIndex = null) {
        local status = EMO_NO_ERROR;
        if (!loaded) {
            if (frameIndex != null) setFrame(frameIndex);
            status = stage.loadSprite(id, x, y);

            if (status == EMO_NO_ERROR) {
                loaded = true;
            }
        }
        return status;
    }

    function animate(startFrame, frameCount, interval, loopCount = 0) {
        return stage.animate(id, startFrame, frameCount, interval, loopCount);
    }

    function pause() {
        return stage.pause(id);
    }

    function pauseAt(frameIndex) {
        return stage.pauseAt(id, frameIndex);
    }

    function setFrame(frameIndex) {
        return pauseAt(frameIndex);
    }

    function selectFrame(frameName) {
        return stage.selectFrame(id, frameName);
    }

    function stop() {
        return stage.stop(id);
    }
    
    function getFrameIndex() {
        return stage.getFrameIndex(id);
    }
    
    function getFrameCount() {
        return stage.getFrameCount(id);
    }
    
    function isAnimationFinished() {
        return stage.isAnimationFinished(id);
    }
}

class emo.Rectangle extends emo.Sprite {
    function constructor() {
        name = null;
        id = stage.createSprite(name);
    }
}

class emo.Line extends emo.Sprite {
    function constructor(x1 = 0, y1 = 0, x2 = 1, y2 = 1) {
        name = null;
        id = stage.createLine(x1, y1, x2, y2);
    }
    function move(x1, y1, x2, y2) {
        return stage.setLine(id, x1, y1, x2, y2);
    }
}

class emo.MapSprite extends emo.Sprite {
    function constructor(rawname, frameWidth, frameHeight, border = 0, margin = 0) {
        local sprite = emo.SpriteSheet(rawname, frameWidth, frameHeight, border, margin, 0);
        name         = sprite.getName();
        childId      = sprite.getId();
        id           = stage.createMapSprite(sprite.getId());
    }

    function load(x = null, y = null) {
        local status = EMO_NO_ERROR;
        if (!loaded) {
            status = stage.loadMapSprite(id, x, y, null, null);
            if (status == EMO_NO_ERROR) {
                loaded = true;
            }
        }
        return status;
    }

    function addRow(tiles) {
        return stage.addTileRow(id, tiles);
    }

    function setMap(tiles) {
        clearTiles();
        for (local i = 0; i < tiles.len(); i++) {
            this.addRow(tiles[i]);
        }
    }
    
    function clearTiles() {
        stage.clearTiles(id);
    }

    function setTileAt(row, column, value) {
        return stage.setTileAt(id, row, column, value);
    }

    function getTileAt(row, column) {
        return stage.getTileAt(id, row, column);
    }

    function getTileIndexAtCoord(x, y) {
        return emo.TileIndex.fromArray(stage.getTileIndexAtCoord(id, x, y));
    }

    function getTilePositionAtCoord(x, y) {
        return emo.Vec2.fromArray(stage.getTilePositionAtCoord(id, x, y));
    }

    function show() { return stage.show(childId); }
    function hide() { return stage.hide(childId); }
    function alpha(a = null) { return stage.alpha(childId, a); }
    function red  (r = null) { return stage.red  (childId, r); }
    function green(g = null) { return stage.green(childId, g); }
    function blue (b = null) { return stage.blue (childId, b); }
    
    function scale(scaleX, scaleY, centerX = null, centerY = null) {
        error("MapSprite.scale is not supported.");
    }

    function rotate(angle, centerX = null, centerY = null, axis = null) {
        error("MapSprite.rotate is not supported.");
    }
}

class emo.TextSprite extends emo.MapSprite {
    textbase = null;
    indexes  = null;
    
    function constructor(_name, _textbase, _width, _height, _border = null, _margin = null) {
        textbase = _textbase;
        indexes = [];
        
        base.constructor(_name, _width, _height, _border, _margin);
    }
    
    function setText(text) {
        text = text.tostring();
        indexes.clear();
        for (local i = 0; i < text.len(); i++) {
            local idx = textbase.find(text.slice(i, i+1));
            if (idx == null) idx = -1;
            indexes.append(idx);
        }
        clearTiles();
        addRow(indexes);
    }
    
    function scale(scaleX, scaleY) {
        stage.scale(id, scaleX, scaleY, 0, 0);
        return stage.scale(childId, scaleX, scaleY, 0, 0);
    }
    
    function getScaleX() {
        return stage.getScaleX(childId);
    }
    
    function getScaleY() {
        return stage.getScaleY(childId);
    }
    
    function getScaledWidth() {
        return indexes.len() * stage.getWidth(childId) * getScaleX();
    }
    
    function getScaledHeight() {
        return stage.getHeight(childId) * getScaleY();
    }
}

class emo.LiquidSprite extends emo.Sprite {
    TRIANGLE = 5;
    RHOMBUS  = 6;
    HEXAGON  = 8;
    OCTAGON  = 10;
    POLYGON10 = 12;
    POLYGON12 = 14;
    CIRCLE    = 18;
    function constructor(rawname, segments = null, texCoords = null) {
        name = this.getResourceName(rawname);
        id   = stage.createLiquidSprite(name);
        childId = -1;
        loaded = false;
        
        if (type(segments) == "array") {
            this.setSegmentCount(segments.len());
            this.updateSegmentCoords(segments);
        }
        
        if (type(texCoords) == "array") {
            this.setSegmentCount(texCoords.len());
            this.updateTextureCoords(texCoords);
        }
    }
    
    function updateTextureCoords(coords) {
        return stage.updateLiquidTextureCoords(id, coords);
    }
    
    function updateSegmentCoords(coords) {
        return stage.updateLiquidSegmentCoords(id, coords);
    }

    function getSegmentCount() {
        return stage.getLiquidSegmentCount(id);
    }
    
    function setSegmentCount(count) {
        return stage.updateLiquidSegmentCount(id, count);
    }
}

class emo.PointSprite extends emo.Sprite {
    function constructor(rawname = null, points = null) {
        name = this.getResourceName(rawname);
        id   = stage.createPointSprite(name);
        childId = -1;
        loaded = false;
        
        if (type(points) == "array") {
            this.setPointCount(points.len());
            this.updatePointCoords(points);
        }
    }

    function setPoints(points) {
        this.setPointCount(points.len());
        this.updatePointCoords(points);
    }
    
    function updatePointCoords(coords) {
        return stage.updatePointDrawablePointCoords(id, coords);
    }
    
    function getPointCount() {
        return stage.getPointDrawablePointCount(id);
    }
    
    function setPointCount(count) {
        return stage.updatePointDrawablePointCount(id, count);
    }
}

class emo.AnalogOnScreenController extends emo.Sprite {
    knob    = null;
    padding = null;
    margin  = null;
    
    updateInterval = null;
    lastUpdate     = null;
    
    previousRelativeX = null;
    previousRelativeY = null;
    
    function constructor(_name, _knobname, _alpha = 0.5) {
        base.constructor(_name);
        knob = emo.Sprite(_knobname);
        
        alpha(_alpha);
        
        emo.Event().addMotionListener(this);
        emo.Event().addOnUpdateListener(this);
        
        padding = 0;
        margin  = 0;

        updateInterval = 100;
        lastUpdate = -1000;
    }
    
    function load() {
        base.load();
        knob.load();
    }
    
    function show() { knob.show(); return base.show(); }
    function hide() { knob.hide(); return knobase.hide(); }
    function alpha(a = null) { knob.alpha(a); return base.alpha(a); }
    function red  (r = null) { knob.red(r);   return base.red(r);   }
    function green(g = null) { knob.green(g); return base.green(g); }
    function blue (b = null) { knob.blue(b);  return base.blue(b);  }

    function move(x, y, z = 99) {
        releaseKnob(x, y, z + 1);
        return base.move(x, y, z);
    }
    
    function releaseKnob(x, y, knobZ) {
        local knobX = x + (getScaledWidth()  - knob.getScaledWidth())  * 0.5;
        local knobY = y + (getScaledHeight() - knob.getScaledHeight()) * 0.5;
        knob.move(knobX, knobY, knobZ);
    }
    
    function getNeutralKnobX() {
        return getX() + (getScaledWidth() - knob.getScaledWidth()) * 0.5;
    }
    
    function getNeutralKnobY() {
        return getY() + (getScaledHeight() - knob.getScaledHeight()) * 0.5;
    }

    function moveCenter(x, y, z = null) {
        knob.moveCenter(x, y, z);
        return base.moveCenter(x, y, z);
    }

    function scale(scaleX, scaleY, centerX = null, centerY = null) {
        knob.scale(scaleX, scaleY, centerX, centerY);
        return base.scale(scaleX, scaleY, centerY);
    }

    function rotate(angle, centerX = null, centerY = null, axis = null) {
        knob.rotate(angle, centerX, centerY, axis);
        return base.rotate(angle, centerX, centerY, axis);
    }

    function color(red, green, blue, alpha = null) {
        knob.color(red, green, blue, alpha);
        return base.color(red, green, blue, alpha);
    }

    function remove() {
        emo.Event().removeOnUpdateListener(this);
        emo.Event().removeMotionListener(this);
        knob.remove();
        return base.remove();
    }

    function onMotionEvent(mevent) {
        local x = mevent.getX();
        local y = mevent.getY();
        if (mevent.getAction() == MOTION_EVENT_ACTION_UP ||
            mevent.getAction() == MOTION_EVENT_ACTION_CANCEL  ||
            mevent.getAction() == MOTION_EVENT_ACTION_OUTSIDE ||
            mevent.getAction() == MOTION_EVENT_ACTION_POINTER_UP) {
            releaseKnob(getX(), getY(), knob.getZ());
            fireControlEvent(true, true);
        } else {
            if (contains(x, y)) {
                knob.moveCenter(x, y);
            }
        }
    }
    
    function elapsed() {    
        return EMO_RUNTIME_STOPWATCH.elapsed();    
    }
    
    function isNeutral() {
        return getRelativeX() == 0 && getRelativeY() == 0;
    }
    
    function fireControlEvent(hasChanged, immediate = false) {
        local delta = elapsed() - lastUpdate;
        if (immediate || delta >= updateInterval) {
            local x = getRelativeX();
            local y = getRelativeY();
            emo._onControlEvent(this, x, y, hasChanged);
            lastUpdate = elapsed();
            
            if (isNeutral()) {
                previousRelativeX = null;
                previousRelativeY = null;
            } else {
                previousRelativeX = x;
                previousRelativeY = y;
            }
        }
    }
    
    function getRelativeX() {
        local unit  = (getWidth() * 0.5) - padding;
        local axisX = getX() + (getWidth() * 0.5);
        local knobX = knob.getX() + (knob.getWidth() * 0.5);
        
        local x = round((knobX - axisX) / unit.tofloat() * 100.0);
        if (x > 0) x = min(100, x);
        if (x < 0) x = max(-100, x);
         
        return x;
    }
    
    function getRelativeY() {
        local unit  = (getHeight() * 0.5) - padding;
        local axisY = getY() + (getHeight() * 0.5);
        local knobY = knob.getY() + (knob.getHeight() * 0.5);
        
        local y = round((knobY - axisY) / unit.tofloat() * 100.0);
        if (y > 0) y = min(100, y);
        if (y < 0) y = max(-100, y);
         
        return y;
    }
    
    function getKnobWidth() {
        return knob.getWidth();
    }
    
    function getKnobHeight() {
        return knob.getHeight();
    }
    
    function getControlX() {
        return relativeX();
    }
    
    function getControlY() {
        return relativeY();
    }
    
    function contains(x, y) {
        return x >= getX() - margin && x <= getX() + getWidth()  + margin &&
               y >= getY() - margin && y <= getY() + getHeight() + margin;
    }
    
    function knobContains(x, y) {
        return x >= knob.getX() - padding && x <= knob.getX() + knob.getWidth()  + padding &&
               y >= knob.getY() - padding && y <= knob.getY() + knob.getHeight() + padding;
    }
    
    function getDirection() {
        local relativeX = getRelativeX();
        local relativeY = getRelativeY();
        
        if (abs(relativeX) > abs(relativeY)) {
            if (relativeX > 0) {
                return CONTROL_RIGHT;
            } else if (relativeX < 0) {
                return CONTROL_LEFT;
            } else {
                return CONTROL_CENTER;
            }
        } else {
            if (relativeY > 0) {
                return CONTROL_DOWN;
            } else if (relativeY < 0) {
                return CONTROL_UP;
            } else {
                return CONTROL_CENTER;
            }
        }
    }
    
    function onUpdate() {
        if (previousRelativeX == getRelativeX() && previousRelativeY == getRelativeY()) {
            fireControlEvent(false);
        } else if (!isNeutral()) {
            fireControlEvent(true, false);
        }
    }
    
    function getObject() { return null; }
    function onPause()  { }
    function onResume() { } 
}

class emo.DigitalOnScreenController extends emo.AnalogOnScreenController {
    function constructor(_name, _knobname, _alpha = 0.5) {
        base.constructor(_name, _knobname, _alpha);
    }
    function fireControlEvent(hasChanged, immediate = false) {
        local relativeX = getRelativeX();
        local relativeY = getRelativeY();
        local knobWidthSpace  = knob.getWidth()  * 0.5;
        local knobHeightSpace = knob.getHeight() * 0.5;
        
        if (abs(relativeX) > abs(relativeY)) {
            if (relativeX > 0) {
                knob.move(getX() + getWidth() - knobWidthSpace + margin, getNeutralKnobY());
            } else if (relativeX < 0) {
                knob.move(getX() - margin - knobWidthSpace, getNeutralKnobY());
            }
        } else {
            if (relativeY > 0) {
                knob.move(getNeutralKnobX(), getY() + getHeight() - knobHeightSpace + margin);
            } else if (relativeY < 0) {
                knob.move(getNeutralKnobX(), getY() - margin - knobHeightSpace);
            }
        }
        
        
        base.fireControlEvent(hasChanged, immediate);
    }
}

class emo.Snapshot extends emo.Sprite {
    targetObj   = null;
    placeHolder = null;
    immediateLoading = null;
    function constructor() {
        name = null;
        id = stage.createSnapshot();
    }
    function load(x = null, y = null) {
        local status = EMO_NO_ERROR;
        if (!loaded) {

            status = stage.loadSnapshot(id, x, y);

            if (status == EMO_NO_ERROR) {
                uptime = EMO_RUNTIME_STOPWATCH.elapsed();
                loaded = true;
            }
        }
        return status;
    }
    function remove() {
        local status = EMO_NO_ERROR;
        if (loaded) {
            clearModifier();
            emo.Event().removeMotionListener(this);
            if (physicsInfo != null) {
                physicsInfo.remove();
                physicsInfo = null;
            }
            status = stage.removeSnapshot(id);
            loaded = false;
        }
        return status;
    }
    function start(x = null, y = null) {
        return load(x, y);
    }
    function stop() {
        return stage.stopSnapshot(id);
    }
}

function emo::_onStopOffScreen(dt) {
    if (EMO_RUNTIME_SNAPSHOT == null) return;
    
    EMO_RUNTIME_SNAPSHOT.setZ(2147483647);

    if (EMO_RUNTIME_DELEGATE != null &&
            EMO_RUNTIME_DELEGATE.rawin("onDispose")) {
        EMO_RUNTIME_DELEGATE.onDispose();
        EMO_RUNTIME_DELEGATE = null;
    }

    if (EMO_RUNTIME_SNAPSHOT.immediateLoading) {
        EMO_RUNTIME_DELEGATE = EMO_RUNTIME_SNAPSHOT.targetObj;
        if (EMO_RUNTIME_DELEGATE != null &&
                EMO_RUNTIME_DELEGATE.rawin("onLoad")) {
            EMO_RUNTIME_DELEGATE.onLoad();
        }
    }
    EMO_RUNTIME_SNAPSHOT_STOPPED = true;

    local modifier = EMO_RUNTIME_SNAPSHOT.placeHolder;
    modifier.onResume();
    EMO_RUNTIME_SNAPSHOT.addModifier(modifier);
    EMO_RUNTIME_SNAPSHOT.placeHolder = null;
}

function emo::Stage::modifyingLoadEventCallback(snapshot, modifier, eventType) {
    if (modifier.getName() == "stage_modifying" && eventType == EVENT_MODIFIER_FINISH) {
        EMO_RUNTIME_SNAPSHOT_STOPPED = false;
        EMO_RUNTIME_SNAPSHOT.placeHolder = modifier.nextChain;
        EMO_RUNTIME_SNAPSHOT.stop();
    }
    if (modifier.getName() == "stage_disposing" && eventType == EVENT_MODIFIER_FINISH) {
        local targetObj        = EMO_RUNTIME_SNAPSHOT.targetObj;
        local immediateLoading = EMO_RUNTIME_SNAPSHOT.immediateLoading;

        if (!EMO_RUNTIME_SNAPSHOT_STOPPED) {
            emo._onStopOffScreen(0);
        }

        EMO_RUNTIME_SNAPSHOT.remove();
        EMO_RUNTIME_SNAPSHOT = null;

        EMO_RUNTIME_SNAPSHOT = emo.Snapshot();
        EMO_RUNTIME_SNAPSHOT.start();
        EMO_RUNTIME_SNAPSHOT.hide();

        if (!immediateLoading) {
            EMO_RUNTIME_DELEGATE = targetObj;
            if (EMO_RUNTIME_DELEGATE != null &&
                    EMO_RUNTIME_DELEGATE.rawin("onLoad")) {
                EMO_RUNTIME_DELEGATE.onLoad();
            }
        }

        modifier.nextChain.onResume();
        EMO_RUNTIME_SNAPSHOT.addModifier(modifier.nextChain);
        EMO_RUNTIME_SNAPSHOT.show();
    }
    if (modifier.getName() == "stage_loading" && eventType == EVENT_MODIFIER_FINISH) {
        EMO_RUNTIME_SNAPSHOT.remove();
        EMO_RUNTIME_SNAPSHOT = null;
    }
}

function emo::Stage::modifyingLoad(obj, currentSceneModifier = null, nextSceneModifier = null, immediateLoading = false) {
    if (!isOffscreenSupported()) return;
    if (EMO_RUNTIME_SNAPSHOT != null) {
        EMO_RUNTIME_SNAPSHOT.remove();
        EMO_RUNTIME_SNAPSHOT = null;
    }
    EMO_RUNTIME_SNAPSHOT = emo.Snapshot();
    EMO_RUNTIME_SNAPSHOT.targetObj = obj;
    EMO_RUNTIME_SNAPSHOT.immediateLoading = immediateLoading;
    EMO_RUNTIME_SNAPSHOT.start();

    if (currentSceneModifier == null) {
        currentSceneModifier = emo.NoopModifier(16);
    }

    if (nextSceneModifier == null) {
        nextSceneModifier = emo.NoopModifier(16);
    }

    currentSceneModifier.onPause();
    nextSceneModifier.onPause();

    currentSceneModifier.setName("stage_disposing");
    nextSceneModifier.setName("stage_loading");

    currentSceneModifier.setEventCallback(modifyingLoadEventCallback);
    nextSceneModifier.setEventCallback(modifyingLoadEventCallback);

    currentSceneModifier.nextChain = nextSceneModifier;

    local toStartModifier = emo.NoopModifier(16);
    toStartModifier.setName("stage_modifying");
    toStartModifier.setEventCallback(modifyingLoadEventCallback);
    toStartModifier.nextChain = currentSceneModifier;

    EMO_RUNTIME_SNAPSHOT.addModifier(toStartModifier);
}

function emo::Stage::load(obj, currentSceneModifier = null, nextSceneModifier = null, immediateLoading = false) {

    if (isOffscreenSupported() && (currentSceneModifier != null || nextSceneModifier != null)) {
        return modifyingLoad(obj, currentSceneModifier, nextSceneModifier, immediateLoading);
    }

    if (EMO_RUNTIME_DELEGATE != null &&
             EMO_RUNTIME_DELEGATE.rawin("onDispose")) {
        EMO_RUNTIME_DELEGATE.onDispose();
        EMO_RUNTIME_DELEGATE = null;
    }

    EMO_RUNTIME_DELEGATE = obj;
    if (EMO_RUNTIME_DELEGATE != null &&
             EMO_RUNTIME_DELEGATE.rawin("onLoad")) {
        EMO_RUNTIME_DELEGATE.onLoad();
    }
}

function emo::Stage::getWindowWidth() {
    return this.windowWidth();
}

function emo::Stage::getWindowHeight() {
    return this.windowHeight();
}

function emo::Stage::getCenterX() {
    return getWindowWidth() * 0.5;
}

function emo::Stage::getCenterY() {
    return getWindowHeight() * 0.5;
}

function emo::_onLoad() { 
    if (emo.rawin("onLoad")) {
        emo.onLoad();
    }
}

function emo::_onGainedFocus() {
    emo.Runtime.clearTextureCache();

    EMO_RUNTIME_STOPWATCH.start();
    EMO_ON_UPDATE_MANAGER.onResume();

    if (emo.rawin("onGainedFocus")) {
        emo.onGainedFocus();
    }
    if (EMO_RUNTIME_DELEGATE != null &&
             EMO_RUNTIME_DELEGATE.rawin("onGainedFocus")) {
        EMO_RUNTIME_DELEGATE.onGainedFocus();
    }
}

function emo::_onLostFocus() {
    emo.Runtime.clearTextureCache();

    EMO_ON_UPDATE_MANAGER.onPause();
    
    if (emo.rawin("onLostFocus")) {
        emo.onLostFocus();
    }
    if (EMO_RUNTIME_DELEGATE != null &&
             EMO_RUNTIME_DELEGATE.rawin("onLostFocus")) {
        EMO_RUNTIME_DELEGATE.onLostFocus();
    }

    EMO_RUNTIME_STOPWATCH.stop();
}

function emo::_onDispose() {
    if (emo.rawin("onDispose")) {
        emo.onDispose();
    }
    if (EMO_RUNTIME_DELEGATE != null &&
             EMO_RUNTIME_DELEGATE.rawin("onDispose")) {
        EMO_RUNTIME_DELEGATE.onDispose();
    }
} 

function emo::_onError(msg) {
    if (emo.rawin("onError")) {
        emo.onError(msg);
    }
    if (EMO_RUNTIME_DELEGATE != null &&
             EMO_RUNTIME_DELEGATE.rawin("onError")) {
        EMO_RUNTIME_DELEGATE.onError(msg);
    }
}

function emo::_onDrawFrame(dt) {
    if (emo.rawin("onDrawFrame")) {
        emo.onDrawFrame(dt);
    }
    if (EMO_RUNTIME_DELEGATE != null &&
             EMO_RUNTIME_DELEGATE.rawin("onDrawFrame")) {
        EMO_RUNTIME_DELEGATE.onDrawFrame(dt);
    }
}

function emo::_onUpdate(dt) {
    EMO_ON_UPDATE_MANAGER.onUpdate();
}

function emo::_onLowMemory() {
    emo.Runtime.clearTextureCache();
    
    if (emo.rawin("onLowMemory")) {
        emo.onLowMemory();
    }
    if (EMO_RUNTIME_DELEGATE != null &&
             EMO_RUNTIME_DELEGATE.rawin("onLowMemory")) {
        EMO_RUNTIME_DELEGATE.onLowMemory();
    }
}

function emo::_onMotionEvent(...) {
    local mevent = emo.MotionEvent(vargv);
    if (emo.rawin("onMotionEvent")) {
        emo.onMotionEvent(mevent);
    }
    if (EMO_RUNTIME_DELEGATE != null &&
             EMO_RUNTIME_DELEGATE.rawin("onMotionEvent")) {
        EMO_RUNTIME_DELEGATE.onMotionEvent(mevent);
    }
    
    for (local i = 0; i < EMO_MOTION_LISTENERS.len(); i++) {
        if (EMO_MOTION_LISTENERS[i].rawin("onMotionEvent")) {
            EMO_MOTION_LISTENERS[i].onMotionEvent(mevent);
        }
    }
}

function emo::_onKeyEvent(...) {
    local kevent = emo.KeyEvent(vargv);
    if (emo.rawin("onKeyEvent")) {
        if (emo.onKeyEvent(kevent)) {
            return true;
        }
    }
    if (EMO_RUNTIME_DELEGATE != null &&
             EMO_RUNTIME_DELEGATE.rawin("onKeyEvent")) {
        if (EMO_RUNTIME_DELEGATE.onKeyEvent(kevent)) {
            return true;
        }
    }
    return false;
}

function emo::_onSensorEvent(...) {
    local sevent = emo.SensorEvent(vargv);
    if (emo.rawin("onSensorEvent")) {
        emo.onSensorEvent(sevent);
    }
    if (EMO_RUNTIME_DELEGATE != null &&
             EMO_RUNTIME_DELEGATE.rawin("onSensorEvent")) {
        EMO_RUNTIME_DELEGATE.onSensorEvent(sevent);
    }
}

class emo.Error {
    code    = null;
    message = null;
}

function emo::_onNetCallback(...) {
    local err   = emo.Error();
    err.code    = vargv[2];
    err.message = vargv[3];
    
    if (emo.rawin("onNetCallback")) {
        emo.onNetCallback(vargv[0], vargv[1], err);
    }
    if (EMO_RUNTIME_DELEGATE != null &&
             EMO_RUNTIME_DELEGATE.rawin("onNetCallback")) {
        EMO_RUNTIME_DELEGATE.onNetCallback(vargv[0], vargv[1], err);
    }
}

function emo::_onFps(fps) {
    if (emo.rawin("onFps")) {
        emo.onFps(fps);
    }
    if (EMO_RUNTIME_DELEGATE != null &&
             EMO_RUNTIME_DELEGATE.rawin("onFps")) {
        EMO_RUNTIME_DELEGATE.onFps(fps);
    }
}

function emo::_onControlEvent(...) {
    if (emo.rawin("onControlEvent")) {
        emo.onControlEvent(vargv[0], vargv[1], vargv[2], vargv[3]);
    }
    if (EMO_RUNTIME_DELEGATE != null &&
             EMO_RUNTIME_DELEGATE.rawin("onControlEvent")) {
        EMO_RUNTIME_DELEGATE.onControlEvent(vargv[0], vargv[1], vargv[2], vargv[3]);
    }
}
